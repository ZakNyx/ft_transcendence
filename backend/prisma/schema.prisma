// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email String @unique

  userId            String         @unique
  image             String?
  dms               DM[]           @relation("participants")
  messages          Message[]
  friend            Json[]
  blockedUsers      String[]
  rooms             RoomMember[]
  roomInvites       Json[]
  FirstTime         Boolean        @default(true)
  // participantNotifs Notification[] @relation(name: "ParticipantNotifsToUser")

  imageUrl        String
  picture         String?
  pictureStatus   Boolean @default(false)
  pictureMimetype String?

  username    String @unique
  displayname String @unique
  status      Status @default(ONLINE)

  wins         Int    @default(0)
  loses        Int    @default(0)
  winrate      Float  @default(0)
  gamesPlayed  Int    @default(0)
  elo          Int    @default(0)
  matchHistory Json[]

  status2fa Boolean @default(false)
  validated Boolean @default(false)

  secret2fa     String?
  secretAuthUrl String?

  friends     User[] @relation("friends")
  friendOf    User[] @relation("friends")
  blocks      User[] @relation("blocked")
  blockedBy   User[] @relation("blocked")
  requested   User[] @relation("friendreq")
  requestedBy User[] @relation("friendreq")

  notifications Notification[]
  games         Game[]         @relation("GamePlayers")
  chatRooms     ChatRoom[]     @relation("userInChatRoom")

  achievements String[]
}

model Notification {
id Int @id @default(autoincrement())

  reciever String
  sender   String
  type String
  data String
  time DateTime @default(now())

  user User @relation(fields: [reciever], references: [username])
  }

model Game {
  id Int @id @default(autoincrement())

  player1 String
  player2 String

  score1 String @default("")
  score2 String @default("")

  users  User[]  @relation("GamePlayers")
  ingame Boolean @default(false)
}

enum Status {
  ONLINE
  OFFLINE
  INGAME
}

model Message {
  id             Int       @id @default(autoincrement())
  sentAt         DateTime  @default(now())
  messageContent String
  dmId           Int?
  senderId       String
  data     String?
  time     String?
  roomId         Int?
  dm             DM?       @relation(fields: [dmId], references: [id])
  sender         User      @relation(fields: [senderId], references: [userId])
  room           Room?     @relation(fields: [roomId], references: [id])
  roomData       ChatRoom? @relation(fields: [roomId], references: [id], map: "MessageRoomData")
}


model DM {
  id           Int       @id @default(autoincrement())
  // participantId Int
  // msgId Int
  creatorId    String
  participants User[]    @relation("participants")
  // participant RoomMember @relation("participant", fields: [participantId], references: [id])
  // participants RoomMember[]
  msg          Message[]
  lastUpdate   DateTime  @updatedAt
}

model BannedUser {
  id     Int @id @default(autoincrement())
  userId Int
  // user User @relation(fields: [userId], references: [id])
}

model FriendList {
  id Int @id @default(autoincrement())
  // friends User[]
}

model friendRequest {
  id       Int @id @default(autoincrement())
  senderId Int
  // sender  User @relation(fields: [senderId], references: [id])
}

model Room {
  id          Int          @id @default(autoincrement())
  msgs        Message[]
  image       String
  RoomName    String
  visibility  String
  password    String?
  RoomMembers RoomMember[]
  bannedUsers String[]
  lastUpdate  DateTime     @updatedAt
}

model RoomMember {
  id             Int       @id @default(autoincrement())
  RoomId         Int
  memberId       String
  role           Role      @default(USER)
  muted          Boolean   @default(false)
  muteExpiration DateTime?
  room           Room      @relation(fields: [RoomId], references: [id])
  member         User      @relation(fields: [memberId], references: [userId])
  joinTime       DateTime
  inviterId      String?
  // leftTime DateTime
}

enum Role {
  USER
  ADMIN
  OWNER
}

model ChatRoom {
  id Int @id @default(autoincrement())

  roomName   String   @unique
  timeCreate DateTime @default(now())

  users User[] @relation("userInChatRoom")

  messages Message[]

  admins      String[]
  mutedUsers  String[]
  bannedUsers String[]

  isDm Boolean @default(false)

  status String @default("public")

  password String?
}
